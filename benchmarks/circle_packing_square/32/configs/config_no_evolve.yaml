SYS_MSG: |
  SETTING:
  You are an expert computational geometer and optimization specialist focusing on circle packing problems.
  Your task is to evolve a constructor function that generates an optimal arrangement of exactly 32 non-overlapping circles within a unit square [0,1] × [0,1], maximizing the sum of their radii.

  PROBLEM CONTEXT:
  - Target: Beat the AlphaEvolve benchmark of sum_radii = 2.937944526205518
  - Constraint: All circles must be fully contained within the unit square with no overlaps
  - Mathematical formulation: For circle i at position (xi, yi) with radius ri:
    * Containment: ri ≤ xi ≤ 1-ri and ri ≤ yi ≤ 1-ri
    * Non-overlap: √[(xi-xj)² + (yi-yj)²] ≥ ri + rj for all i≠j
    * Objective: maximize Σri subject to above constraints

  COMPUTATIONAL RESOURCES & IMPLEMENTATION GUIDELINES:
  **Core packages**: numpy, scipy, sympy, pandas, networkx, jax, torch, numba, scikit-learn

  **Additional useful packages**:
  - **Optimization**: `deap` (evolutionary algorithms), `platypus` (multi-objective optimization)
  - **Geometric computing**: `shapely` (geometric operations), `rtree` (spatial indexing), `scipy.spatial` (KDTree, Voronoi)
  - **Constraint programming**: `python-constraint`, `ortools` (Google OR-Tools)
  - **Physics simulation**: `pymunk` (2D physics), `pybullet` (physics engine)
  - **Performance**: `cython`, `joblib` (parallelization)

  PERFORMANCE METRICS:
  1. **sum_radii**: Total sum of all 32 circle radii (PRIMARY OBJECTIVE - maximize)
  2. **benchmark_ratio**: sum_radii / 2.937944526205518 (progress toward beating benchmark)  
  3. **eval_time**: Execution time in seconds (keep reasonable, prefer accuracy over speed)

  TECHNICAL REQUIREMENTS:
  - **Determinism**: Use fixed random seeds if employing stochastic methods for reproducibility
  - **Error handling**: Graceful handling of optimization failures or infeasible configurations
  - **Memory efficiency**: Avoid excessive memory allocation for distance matrix computations
  - **Scalability**: Design with potential extension to different circle counts in mind

  # PROMPT-BLOCK-START

  OPTIMIZATION STRATEGIES TO CONSIDER:
  - **Hybrid approaches**: Combine analytical patterns (hexagonal, square lattice) with numerical optimization
  - **Multi-scale packing**: Strategic size hierarchies - large "anchor" circles (r~0.1-0.2) with small "filler" circles (r~0.01-0.05)
  - **Boundary optimization**: Exploit edge/corner advantages - corner circles can achieve theoretical max radius √2/2 ≈ 0.707
  - **Adaptive algorithms**: 
    * Simulated annealing with temperature scheduling
    * Genetic algorithms with crossover of circle positions/sizes
    * Particle swarm optimization for continuous parameter spaces
  - **Local search refinement**: 
    * Gradient-based methods (L-BFGS-B, SLSQP) for fine-tuning
    * Sequential quadratic programming for constrained optimization
  - **Physics-inspired methods**: 
    * Molecular dynamics with repulsive forces
    * Energy minimization (Lennard-Jones potentials)
    * Spring-mass systems for dynamic relaxation
  - **Decomposition strategies**:
    * Place largest circles first, then fill remaining space
    * Recursive subdivision of the square into regions
    * Voronoi-based adaptive placement

  GEOMETRIC INSIGHTS & MATHEMATICAL FOUNDATIONS:
  - **Packing density theory**: Optimal infinite plane density ≈ π/(2√3) ≈ 0.907, but finite boundary effects reduce this significantly
  - **Boundary effects**: Perfect symmetry often suboptimal due to "wasted" boundary space
  - **Critical configurations**: 
    * Single large circle: max radius = 0.5, sum = 0.5
    * Uniform grid: 32 circles in 5×6 grid gives r ≈ 0.083, sum ≈ 2.17
    * Hexagonal approximation: theoretical estimate ~2.4-2.6 range
  - **Size distribution insights**: Optimal solutions likely feature 3-5 size classes rather than uniform radii
  - **Symmetry considerations**: Exploit reflectional symmetry across x=0.5, y=0.5 axes when beneficial

  **Recommended implementation patterns:**
  - **scipy.optimize**: 
    * `minimize()` with method='SLSQP' for constrained problems
    * `differential_evolution()` for global optimization
    * Custom constraint functions for overlap detection
  - **numpy**: Vectorized distance calculations, constraint evaluation
  - **numba**: JIT compilation for performance-critical overlap checking
  - **JAX/PyTorch**: Automatic differentiation for gradient-based methods
  - **Advanced techniques**:
    * KD-trees or spatial hashing for efficient neighbor queries
    * Constraint satisfaction programming (CSP) formulations
    * Multi-objective optimization (sum_radii vs. constraint violations)

  VALIDATION FRAMEWORK:
  - **Constraint checking**:
    * Boundary violations: Verify ri ≤ xi ≤ 1-ri and ri ≤ yi ≤ 1-ri for all circles
    * Overlap detection: Check √[(xi-xj)² + (yi-yj)²] ≥ ri + rj for all pairs
    * Circle count: Ensure exactly 32 circles are provided
  - **Data validation**:
    * All coordinates must be floats in [0,1]
    * All radii must be positive floats
    * No NaN or infinite values
  - **Solution quality assessment**:
    * Local optimality checks using gradient norms
    * Convergence criteria evaluation
    * Robustness testing with small perturbations

  # PROMPT-BLOCK-END

CODEBASE_PATH: 'src/'
INIT_FILE_DATA: {filename: 'init_program.py', language: 'python'}
EVAL_FILE_NAME: 'evaluate.py'
EVAL_TIMEOUT: 180

MAX_MEM_BYTES: 1000000000
MEM_CHECK_INTERVAL_S: 0.1

EVOLVE_CONFIG: {fitness_key: 'benchmark_ratio',
                num_epochs: 100,ckpt: 5,max_size: 100,init_pop: 100,
                exploration_rate: 0.3, 
                selection_policy: 'roulette', selection_kwargs: {roulette_by_rank: True},
                early_stopping_rounds: 100,
                num_islands: 5, migration_topology: 'empty', migration_interval: 100, migration_rate: 0.1,
                meta_prompting: False, num_inspirations: 0,
                max_chat_depth: 3}

ENSEMBLE: [{model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False},
           {model_name: 'GOOGLE_GEMINI-2.5-PRO', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.2, verify_ssl: False}]

SAMPLER_AUX_LM : {model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False}