SYS_MSG: |
  SETTING:
  You are an expert computational geometer and optimization specialist focusing on circle packing problems.
  Your task is to evolve a constructor function that generates an optimal arrangement of exactly 26 non-overlapping circles within a unit square [0,1] × [0,1], maximizing the sum of their radii.

  PROBLEM CONTEXT:
  - Target: Beat the AlphaEvolve benchmark of sum_radii = 2.6358627564136983
  - Constraint: All circles must be fully contained within the unit square with no overlaps
  - Mathematical formulation: For circle i at position (xi, yi) with radius ri:
    * Containment: ri ≤ xi ≤ 1-ri and ri ≤ yi ≤ 1-ri
    * Non-overlap: √[(xi-xj)² + (yi-yj)²] ≥ ri + rj for all i≠j
    * Objective: maximize Σri subject to above constraints

  COMPUTATIONAL RESOURCES & IMPLEMENTATION GUIDELINES:
  **Core packages**: numpy, scipy, sympy, pandas, networkx, jax, torch, numba, scikit-learn

  **Additional useful packages**:
  - **Optimization**: `deap` (evolutionary algorithms), `platypus` (multi-objective optimization)
  - **Geometric computing**: `shapely` (geometric operations), `rtree` (spatial indexing), `scipy.spatial` (KDTree, Voronoi)
  - **Constraint programming**: `python-constraint`, `ortools` (Google OR-Tools)
  - **Physics simulation**: `pymunk` (2D physics), `pybullet` (physics engine)
  - **Performance**: `cython`, `joblib` (parallelization)

  PERFORMANCE METRICS:
  1. **sum_radii**: Total sum of all 26 circle radii (PRIMARY OBJECTIVE - maximize)
  2. **benchmark_ratio**: sum_radii / 2.6358627564136983 (progress toward beating benchmark)  
  3. **eval_time**: Execution time in seconds (keep reasonable, prefer accuracy over speed)

  TECHNICAL REQUIREMENTS:
  - **Determinism**: Use fixed random seeds if employing stochastic methods for reproducibility
  - **Error handling**: Graceful handling of optimization failures or infeasible configurations
  - **Memory efficiency**: Avoid excessive memory allocation for distance matrix computations
  - **Scalability**: Design with potential extension to different circle counts in mind

  # PROMPT-BLOCK-START

  OPTIMIZATION STRATEGIES TO CONSIDER:
  TODO

  GEOMETRIC INSIGHTS & MATHEMATICAL FOUNDATIONS:
  TODO

  **Recommended implementation patterns:**
  TODO

  VALIDATION FRAMEWORK:
  TODO

  # PROMPT-BLOCK-END
      
CODEBASE_PATH: 'src/'
INIT_FILE_DATA: {filename: 'init_program.py', language: 'python'}
EVAL_FILE_NAME: 'evaluate.py'
EVAL_TIMEOUT: 180

MAX_MEM_BYTES: 1000000000
MEM_CHECK_INTERVAL_S: 0.1

EVOLVE_CONFIG: {fitness_key: 'benchmark_ratio',
                num_epochs: 100,ckpt: 5,max_size: 40,init_pop: 6,
                exploration_rate: 0.3, 
                selection_policy: 'roulette', selection_kwargs: {roulette_by_rank: True},
                early_stopping_rounds: 100,
                num_islands: 5, migration_topology: 'ring', migration_interval: 100, migration_rate: 0.1,
                meta_prompting: True, num_inspirations: 0,
                max_chat_depth: 3}

ENSEMBLE: [{model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False},
           {model_name: 'GOOGLE_GEMINI-2.5-PRO', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.2, verify_ssl: False}]

SAMPLER_AUX_LM : {model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False}