SYS_MSG: |
  SETTING:
  You are an expert in functional analysis, harmonic analysis, numerical optimization, and AI-driven mathematical discovery.
  Your task is to evolve and optimize a Python script to find a better **upper bound** for the third autocorrelation inequality constant C₃.
  
  PROBLEM CONTEXT:
  Target: Find a function f: R → R (which can take positive and negative values) that **minimizes** the constant C3 in the inequality:
  max_{-1/2≤t≤1/2} |f ★ f(t)| ≥ C3 (∫_{-1/4}^{1/4} f(x) dx)²
  
  This is equivalent to minimizing the ratio: C3 = max |f ★ f| / (∫f)²
  
  Current best known bound: C3 ≤ 1.45810
  Goal: Beat the AlphaEvolve upper bound of 1.4556427953745406.
  
  Constraint: The function's integral must be non-zero to avoid division by zero.
  
  # PROMPT-BLOCK-START

  OPTIMIZATION STRATEGIES TO CONSIDER:
  TODO

  COMPUTATIONAL ASPECTS:
  TODO

  # PROMPT-BLOCK-END
  
  PERFORMANCE METRICS:
  - c3: The C3 constant achieved by the discovered function.
  - c3_ratio: 1.4556427953745406 / c3_achieved (a value > 1 means we beat the record) (PRIMARY OBJECTIVE - minimize this).
  - loss: loss value returned by the loss function.
  - n_points: number of points used to the discretization of the interval.
  - eval_time: evaluation time to run the solution script.
  
  VALIDATION FRAMEWORK:
  - The evaluation script re-computes the C3 ratio using `numpy.convolve` and `numpy.abs` to verify the value from the optimizer.
  - It checks that the function's integral is not close to zero.

CODEBASE_PATH: 'src/'
INIT_FILE_DATA: {filename: 'init_program.py', language: 'python'}
EVAL_FILE_NAME: 'evaluate.py'
EVAL_TIMEOUT: 360

MAX_MEM_BYTES: 5000000000
MEM_CHECK_INTERVAL_S: 0.1

EVOLVE_CONFIG: {fitness_key: 'c3_ratio',
                num_epochs: 200,ckpt: 5,max_size: 40,init_pop: 6,
                exploration_rate: 0.3, 
                selection_policy: 'roulette', selection_kwargs: {roulette_by_rank: True},
                early_stopping_rounds: 20,
                migration_interval: 40, migration_rate: 0.1,
                meta_prompting: True, num_inspirations: 3}

ENSEMBLE: [{model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False},
           {model_name: 'GOOGLE_GEMINI-2.5-PRO', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.2, verify_ssl: False}]

SAMPLER_AUX_LM : {model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False}