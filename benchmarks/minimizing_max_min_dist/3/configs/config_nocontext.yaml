SYS_MSG: |
  SETTING:
  You are an expert computational geometer and optimization specialist focusing on 3D point dispersion problems.
  Your task is to evolve a constructor function that generates an optimal arrangement of exactly 14 points in 3D space, maximizing the ratio of minimum distance to maximum distance between all point pairs.
  
  PROBLEM CONTEXT:
  - Target: Beat the current state-of-the-art benchmark of min/max ratio = 1/√4.165849767 ≈ 0.4898
  - Constraint: Points must be placed in 3D Euclidean space (typically normalized to unit cube [0,1]³ or unit sphere)
  - Mathematical formulation: For points Pi = (xi, yi, zi), i = 1,...,14:
    * Distance matrix: dij = √[(xi-xj)² + (yi-yj)² + (zi-zj)²] for all i≠j
    * Minimum distance: dmin = min{dij : i≠j}
    * Maximum distance: dmax = max{dij : i≠j}
    * Objective: maximize dmin/dmax subject to spatial constraints

  PERFORMANCE METRICS:
  1. **min_max_ratio**: dmin/dmax ratio (PRIMARY OBJECTIVE - maximize)
  2. **benchmark_ratio**: min_max_ratio / 0.4898 (progress toward beating AlphaEvolve benchmark)
  3. **eval_time**: Execution time in seconds (balance accuracy vs. efficiency)

  COMPUTATIONAL RESOURCES:
  **Core packages**: numpy, scipy, sympy, pandas
  **Additional useful packages**:
  - **3D optimization**: `scipy.optimize`, `deap`, `platypus`, `pymoo` (multi-objective)
  - **3D geometric computing**: 
    * `scipy.spatial` (3D distance matrices, ConvexHull, SphericalVoronoi)
    * `trimesh` (3D mesh operations), `open3d` (3D data processing)
  - **Specialized 3D algorithms**: 
    * `spherical-geometry` for spherical arrangements
    * `quaternion` package for 3D rotations
  - **Performance**: `numba` (3D JIT compilation), `joblib`

  TECHNICAL REQUIREMENTS:
  - **Reproducibility**: Fixed random seeds for all stochastic components

  # PROMPT-BLOCK-START
    
  OPTIMIZATION STRATEGIES TO CONSIDER:
  TODO
    
  GEOMETRIC INSIGHTS & MATHEMATICAL FOUNDATIONS:
  TODO
  
  **Recommended implementation patterns:**
  TODO
  
  VALIDATION FRAMEWORK:
  TODO
    
  PROBLEM-SPECIFIC 3D CONSIDERATIONS:
  TODO

  # PROMPT-BLOCK-END
      
CODEBASE_PATH: 'src/'
INIT_FILE_DATA: {filename: 'init_program.py', language: 'python'}
EVAL_FILE_NAME: 'evaluate.py'
EVAL_TIMEOUT: 360

MAX_MEM_BYTES: 5000000000
MEM_CHECK_INTERVAL_S: 0.1

EVOLVE_CONFIG: {fitness_key: 'benchmark_ratio',
                num_epochs: 100,ckpt: 5,max_size: 40,init_pop: 6,
                exploration_rate: 0.3, 
                selection_policy: 'roulette', selection_kwargs: {roulette_by_rank: True},
                early_stopping_rounds: 100,
                num_islands: 5, migration_topology: 'ring', migration_interval: 40, migration_rate: 0.1,
                meta_prompting: True, num_inspirations: 3}

ENSEMBLE: [{model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False},
           {model_name: 'GOOGLE_GEMINI-2.5-PRO', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.2, verify_ssl: False}]

SAMPLER_AUX_LM : {model_name: 'GOOGLE_GEMINI-2.5-FLASH', temp: 0.7, top_p: 0.95, retries: 3, weight: 0.8, verify_ssl: False}