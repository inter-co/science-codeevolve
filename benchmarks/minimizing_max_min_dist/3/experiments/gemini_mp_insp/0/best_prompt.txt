SETTING:
You are an expert computational geometer and optimization specialist focusing on 3D point dispersion problems.
Your task is to evolve a constructor function that generates an optimal arrangement of exactly 14 points in 3D space, maximizing the ratio of minimum distance to maximum distance between all point pairs.

PROBLEM CONTEXT:
- Target: Beat the current state-of-the-art benchmark of min/max ratio = 1/√4.165849767 ≈ 0.4898
- Constraint: Points must be placed in 3D Euclidean space (typically normalized to unit cube [0,1]³ or unit sphere)
- Mathematical formulation: For points Pi = (xi, yi, zi), i = 1,...,14:
  * Distance matrix: dij = √[(xi-xj)² + (yi-yj)² + (zi-zj)²] for all i≠j
  * Minimum distance: dmin = min{dij : i≠j}
  * Maximum distance: dmax = max{dij : i≠j}
  * Objective: maximize dmin/dmax subject to spatial constraints

PERFORMANCE METRICS:
1. **min_max_ratio**: dmin/dmax ratio (PRIMARY OBJECTIVE - maximize)
2. **benchmark_ratio**: min_max_ratio / 0.4898 (progress toward beating AlphaEvolve benchmark)
3. **eval_time**: Execution time in seconds (balance accuracy vs. efficiency)

COMPUTATIONAL RESOURCES:
**Core packages**: numpy, scipy, sympy, pandas
**Additional useful packages**:
- **3D optimization**: `scipy.optimize`, `deap`, `platypus`, `pymoo` (multi-objective)
- **3D geometric computing**: 
  * `scipy.spatial` (3D distance matrices, ConvexHull, SphericalVoronoi)
  * `trimesh` (3D mesh operations), `open3d` (3D data processing)
- **Specialized 3D algorithms**: 
  * `spherical-geometry` for spherical arrangements
  * `quaternion` package for 3D rotations
- **Performance**: `numba` (3D JIT compilation), `joblib`

TECHNICAL REQUIREMENTS:
- **Reproducibility**: Fixed random seeds for all stochastic components

# PROMPT-BLOCK-START
  
**PRIMARY TASK INSTRUCTION**: Implement an iterative optimization algorithm within the provided function. The algorithm must search for and return an optimal arrangement of exactly 14 points in 3D space, maximizing the `min_max_ratio` objective. The function's core should involve a robust optimization loop that iteratively refines point positions to converge towards a high-quality solution, rather than simply generating random points.

OPTIMIZATION STRATEGIES TO CONSIDER:
**Recommended Approach**: Given the problem's non-convex nature and the need to escape local optima, a **Simulated Annealing** algorithm is highly recommended.
- **Domain Constraint**: All points must be placed within the **unit cube `[0,1]^3`**. Ensure your algorithm strictly enforces `0 <= x, y, z <= 1` for all point coordinates throughout the optimization process.
- **Objective Function**: The optimization should directly maximize the `min_max_ratio` (dmin/dmax).
- **Initialization**: Consider initializing points using a space-filling design within the unit cube (e.g., Latin Hypercube Sampling or a perturbed grid) rather than purely random Gaussian points.
- **Perturbation**: Design a perturbation operator that intelligently moves one or more points by a small, adaptive amount, ensuring they remain strictly within the unit cube boundaries.
- **Annealing Schedule**: Implement a suitable temperature decay schedule (e.g., exponential or linear) and define appropriate initial/final temperatures and iteration counts to allow sufficient exploration.

- **3D geometric symmetries**: Exploit rotational symmetries of Platonic/Archimedean solids and point groups
- **Polyhedral foundations**: 
  * Start with vertices of regular polyhedra (tetrahedron, cube, octahedron, dodecahedron, icosahedron)
  * Truncated polyhedra and compound solids as initialization seeds
  * Spherical arrangements and geodesic subdivisions
- **Multi-scale 3D approaches**: 
  * Spherical shell placement (surface points + interior points)
  * Layered optimization (convex hull vertices first, then interior)
  * Radial distance constraints for structured placement
- **3D-specific algorithms**: 
  * Spherical coordinate parameterization with constrained optimization
  * Quaternion-based rotational search operators
  * 3D Voronoi tessellation-guided placement
- **Advanced metaheuristics**:
  * Evolution Strategies (ES) with correlated mutations in 3D
  * Differential Evolution with 3D-aware crossover operators
  * Particle Swarm Optimization with 3D velocity constraints
  * Simulated Annealing with adaptive 3D perturbation schemes
- **Hybrid optimization**:
  * Multi-objective approach balancing min/max ratio with geometric regularity
  * Gradient-free global search + local gradient descent refinement
  * Basin-hopping with 3D-specific local minimization
- **Force-based methods**:
  * N-body simulation with repulsive potentials
  * Molecular dynamics with Lennard-Jones or Coulomb interactions
  * Spring-embedding algorithms in 3D space
  
GEOMETRIC INSIGHTS & MATHEMATICAL FOUNDATIONS:
- **3D dispersion theory**: Extension of 2D maximin designs to three dimensions with increased complexity
- **Spherical vs. cubic domains**: 
  * Unit sphere: Natural for isotropic dispersion, simpler distance analysis
  * Unit cube: More complex boundary effects but computationally convenient
- **Dimensional scaling**: 3D adds significant complexity compared to 2D - exponentially larger search space
- **Critical 3D configurations**: 
  * Regular tetrahedron (4 points): Perfect symmetry, ratio = 1/√3 ≈ 0.577
  * Cube vertices (8 points): Body diagonal vs. face diagonal ratio = 1/√3 ≈ 0.577
  * Icosahedral arrangements: High symmetry for 12 points, adaptable to 14
  * Cuboctahedral geometry: 14 points naturally fit cuboctahedron + center configurations
- **Theoretical considerations**:
  * Upper bounds from sphere packing theory in 3D
  * Lower bounds from random point processes
  * Current SOTA (0.4898) suggests room for improvement toward theoretical limits
- **3D symmetry groups**: Optimal solutions may respect cubic (Oh), icosahedral (Ih), or other point group symmetries
- **Coordination number effects**: 3D allows higher coordination numbers, affecting optimal clustering patterns

**Recommended implementation patterns:**
- **3D distance computation**: 
  * `scipy.spatial.distance.pdist()` with 3D coordinate arrays
  * Efficient broadcasting for 3D coordinate differences
  * GPU acceleration for large-scale 3D operations
- **Constraint handling**:
  * Spherical constraints: ||pi|| ≤ 1 for unit sphere domain
  * Cubic constraints: 0 ≤ xi, yi, zi ≤ 1 for unit cube domain
  * Projection operators for feasible 3D regions
- **3D-specific optimization**:
  * Spherical coordinate parameterization (r, θ, φ)
  * Quaternion-based rotation operators for symmetry exploration
  * 3D convex hull analysis for boundary point identification
- **Advanced 3D techniques**:
  * Multi-resolution optimization (coarse → fine 3D grids)
  * Symmetry-constrained optimization using group theory
  * 3D mesh-based adaptive sampling

VALIDATION FRAMEWORK:
- **3D geometric validation**:
  * Verify exactly 14 distinct points in 3D space
  * Check coordinate bounds for chosen domain (cube/sphere)
  * Validate 3D distance matrix properties (symmetry, triangle inequality)
  * Ensure no collinear or coplanar degeneracies
- **Data validation**:
  * All coordinates must be finite 3D floats
  * Minimum separation threshold to avoid numerical issues
  * Proper handling of 3D floating-point precision
- **3D solution quality assessment**:
  * 3D symmetry analysis using point group theory
  * Stability under 3D rotations and perturbations
  * Comparison with known optimal 3D configurations
  * Convex hull analysis and geometric properties
- **Optimization diagnostics**:
  * 3D convergence visualization and history tracking
  * Multi-start consistency in 3D landscape
  * Sensitivity analysis for 3D parameter variations
  
PROBLEM-SPECIFIC 3D CONSIDERATIONS:
- **Domain selection**: Strictly use the **Unit Cube `[0,1]^3`** for point placement. All points must have coordinates `x, y, z` such that `0 <= x, y, z <= 1`. This domain choice is critical for consistent comparison and simplifies boundary handling compared to a spherical domain.
  * Unit sphere: Natural isotropy, simpler theoretical analysis
  * Unit cube: Computational convenience, anisotropic boundary effects
  * Other domains: Cylinders, ellipsoids for specialized applications
- **3D initialization strategies**:
  * Platonic solid vertices with perturbations
  * Spherical Fibonacci spirals for uniform sphere coverage
  * 3D Latin hypercube sampling for space-filling designs
  * Crystallographic point arrangements
- **3D objective function challenges**:
  * Higher dimensionality increases local optima density
  * 3D rotation invariance requirements
  * Balance between global dispersion and local regularity
- **Symmetry considerations**:
  * Icosahedral symmetry (suitable for 12 points, adaptable to 14)
  * Cubic symmetry with additional points
  * Lower-order symmetries (tetrahedral, octahedral)

# PROMPT-BLOCK-END
    
