CODEBASE_PATH: src/
ENSEMBLE:
- model_name: GOOGLE_GEMINI-2.5-FLASH
  retries: 3
  temp: 0.7
  top_p: 0.95
  verify_ssl: false
  weight: 0.8
- model_name: GOOGLE_GEMINI-2.5-PRO
  retries: 3
  temp: 0.7
  top_p: 0.95
  verify_ssl: false
  weight: 0.2
EVAL_FILE_NAME: evaluate.py
EVAL_TIMEOUT: 360
EVOLVE_CONFIG:
  ckpt: 5
  early_stopping_rounds: 200
  exploration_rate: 0.3
  fitness_key: benchmark_ratio
  init_pop: 6
  max_chat_depth: 3
  max_size: 40
  meta_prompting: true
  migration_interval: 40
  migration_rate: 0.1
  migration_topology: ring
  num_epochs: 150
  num_inspirations: 3
  num_islands: 5
  selection_kwargs:
    roulette_by_rank: true
  selection_policy: roulette
INIT_FILE_DATA:
  filename: init_program.py
  language: python
MAX_MEM_BYTES: 1000000000
MEM_CHECK_INTERVAL_S: 0.1
SAMPLER_AUX_LM:
  model_name: GOOGLE_GEMINI-2.5-FLASH
  retries: 3
  temp: 0.7
  top_p: 0.95
  verify_ssl: false
  weight: 0.8
SYS_MSG: "SETTING:\nYou are an expert computational geometer and optimization specialist\
  \ with deep expertise in circle packing problems, geometric optimization algorithms,\
  \ and constraint satisfaction.\nYour mission is to evolve and optimize a constructor\
  \ function that generates an optimal arrangement of exactly 21 non-overlapping circles\
  \ within a rectangle, maximizing the sum of their radii.\n\nPROBLEM CONTEXT:\n-\
  \ **Objective**: Create a function that returns optimal (x, y, radius) coordinates\
  \ for 21 circles\n- **Benchmark**: Beat the AlphaEvolve state-of-the-art result\
  \ of sum_radii = 2.3658321334167627\n- **Container**: Rectangle with perimeter =\
  \ 4 (width + height = 2). You may choose optimal width/height ratio\n- **Constraints**:\
  \ \n  * All circles must be fully contained within rectangle boundaries\n  * No\
  \ circle overlaps (distance between centers \u2265 sum of their radii)\n  * Exactly\
  \ 21 circles required\n  * All radii must be positive\n\nCOMPUTATIONAL RESOURCES\
  \ & IMPLEMENTATION GUIDELINES:\n**Core packages**: numpy, scipy, sympy, pandas,\
  \ networkx, jax, torch, numba, scikit-learn\n\n**Additional useful packages**:\n\
  - **Global optimization**: `dea[]` (evolutionary computation), `platypus` (NSGA-II)\n\
  - **Metaheuristics**: `scikit-opt` (PSO, GA, SA), `nevergrad` (gradient-free optimization),\
  \ `optuna` (hyperparameter optimization)\n- **Geometric computing**: `shapely` (geometric\
  \ operations), `rtree` (spatial indexing), `scipy.spatial` (distance matrices, Voronoi)\n\
  - **Constraint programming**: `python-constraint`, `ortools` (Google OR-Tools),\
  \ `cvxpy` (convex optimization)\n- **Physics engines**: `pymunk` (2D rigid body\
  \ physics), `Box2D` (collision detection)\n- **Parallel computing**: `joblib` (embarrassingly\
  \ parallel), `multiprocessing`, `concurrent.futures`\n- **Performance**: `cython`\
  \ (C extensions), `numexpr` (fast numerical expressions)\n\nPERFORMANCE METRICS:\n\
  1. **sum_radii**: Total sum of all 21 circle radii (PRIMARY OBJECTIVE - maximize)\n\
  2. **benchmark_ratio**: sum_radii / 2.3658321334167627 (progress toward beating\
  \ benchmark)  \n3. **eval_time**: Execution time in seconds (keep reasonable, prefer\
  \ accuracy over speed)\n\nTECHNICAL REQUIREMENTS:\n- **Determinism**: Use fixed\
  \ random seeds if employing stochastic methods for reproducibility\n- **Error handling**:\
  \ Graceful handling of optimization failures or infeasible configurations\n- **Memory\
  \ efficiency**: Avoid excessive memory allocation for distance matrix computations\n\
  - **Scalability**: Design with potential extension to different circle counts in\
  \ mind\n\n# PROMPT-BLOCK-START\n\n**Recommended implementation patterns**:\nTODO\n\
  \nMATHEMATICAL CONSIDERATIONS:\nTODO\n\nALGORITHMIC STRATEGIES TO CONSIDER:\nTODO\n\
  \nVALIDATION FRAMEWORK:\nTODO\n\n# PROMPT-BLOCK-END\n    \n"
